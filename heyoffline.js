// Generated by CoffeeScript 1.4.0
(function() {
  var Heyoffline, Utilities, extend,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  extend = function() {
    var ext, extensions, key, obj, value, _i, _len;
    obj = arguments[0], extensions = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = extensions.length; _i < _len; _i++) {
      ext = extensions[_i];
      for (key in ext) {
        value = ext[key];
        obj[key] = value;
      }
    }
    return obj;
  };

  Utilities = (function() {

    function Utilities() {}

    Utilities.prototype.log = function() {
      if (typeof console !== 'undefined') {
        return console.log((arguments.length <= 1 ? arguments[0] : arguments));
      }
    };

    Utilities.prototype.setOptions = function(options) {
      return extend(this.options, options);
    };

    Utilities.prototype.addEvent = function(element, event, fn, useCapture) {
      if (useCapture == null) {
        useCapture = true;
      }
      return element.addEventListener(event, fn, useCapture);
    };

    Utilities.prototype.setStyles = function(element, styles) {
      var key, value, _results;
      _results = [];
      for (key in styles) {
        value = styles[key];
        _results.push(element.style[key] = !isNaN(value) ? "" + value + "px" : value);
      }
      return _results;
    };

    return Utilities;

  })();

  Heyoffline = (function(_super) {

    __extends(Heyoffline, _super);

    Heyoffline.prototype.options = {
      text: {
        title: "You're currently offline",
        content: "Seems like you've became offline,                you might want to wait until your network comes so you don't                loose any data already entered into fields",
        button: "That's OK, I know what I'm doing"
      },
      monitorFields: true,
      delay: 1000,
      prefix: 'heyoffline',
      customStyles: false,
      enableDimiss: true,
      elements: ['input', 'select', 'textarea', '*[contenteditable]']
    };

    Heyoffline.prototype.modified = false;

    function Heyoffline(options) {
      this.hideMessage = __bind(this.hideMessage, this);

      this.offline = __bind(this.offline, this);

      this.online = __bind(this.online, this);
      this.setOptions(options);
      this.log(this.options);
      this.setup();
    }

    Heyoffline.prototype.setup = function() {
      this.events = {
        element: ['keyup', 'change'],
        network: ['online', 'offline']
      };
      this.elements = {
        fields: document.querySelectorAll(this.options.elements.join(',')),
        overlay: document.createElement('div'),
        modal: document.createElement('div'),
        heading: document.createElement('h2'),
        content: document.createElement('p'),
        button: document.createElement('a')
      };
      this.defaultStyles = {
        overlay: {
          position: 'absolute',
          top: 0,
          left: 0,
          width: '100%'
        },
        modal: {
          padding: 10,
          background: '#fff',
          boxShadow: '0 0 20px rgba(0, 0, 0, 0.3)',
          width: 400,
          margin: '10% auto'
        },
        heading: {
          color: '#f00'
        },
        content: {
          color: ''
        },
        button: {
          color: '#ccc'
        }
      };
      this.attachEvents();
      return this.createElements();
    };

    Heyoffline.prototype.createElements = function() {
      var overlayStyles;
      this.elements.overlay.setAttribute('class', "" + this.options.prefix + "_overlay");
      this.elements.overlay = document.body.insertBefore(this.elements.overlay);
      overlayStyles = extend(this.defaultStyles.overlay, {
        background: 'rgba(0, 0, 0, 0.3)',
        height: window.innerHeight
      });
      this.setStyles(this.elements.overlay, overlayStyles);
      this.elements.modal.setAttribute('class', "" + this.options.prefix + "_modal");
      this.elements.modal = this.elements.overlay.insertBefore(this.elements.modal);
      this.setStyles(this.elements.modal, this.defaultStyles.modal);
      this.elements.heading.setAttribute('class', "" + this.options.prefix + "_heading");
      this.elements.heading = this.elements.modal.insertBefore(this.elements.heading);
      this.setStyles(this.elements.heading, this.defaultStyles.heading);
      this.elements.heading.innerHTML = this.options.text.title;
      this.elements.content.setAttribute('class', "" + this.options.prefix + "_content");
      this.elements.content = this.elements.modal.insertBefore(this.elements.content);
      this.setStyles(this.elements.content, this.defaultStyles.content);
      this.elements.content.innerHTML = this.options.text.content;
      if (this.options.enableDimiss) {
        this.elements.button.setAttribute('class', "" + this.options.prefix + "_button");
        this.elements.button.setAttribute('href', '#dismiss-message');
        this.elements.button = this.elements.modal.insertBefore(this.elements.button);
        this.setStyles(this.elements.button, this.defaultStyles.button);
        this.elements.button.innerHTML = this.options.text.button;
        this.addEvent(this.elements.button, 'click', this.hideMessage);
      }
      return this.log(this.elements.overlay);
    };

    Heyoffline.prototype.destroyElements = function() {
      return this.elements.overlay.parentNode.removeChild(this.elements.overlay);
    };

    Heyoffline.prototype.attachEvents = function() {
      var event, field, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.elements.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        this.elementEvents(field);
      }
      _ref1 = this.events.network;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        event = _ref1[_j];
        _results.push(this.networkEvents(event));
      }
      return _results;
    };

    Heyoffline.prototype.elementEvents = function(field) {
      var event, _i, _len, _ref, _results,
        _this = this;
      _ref = this.events.element;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        _results.push((function(event) {
          return _this.addEvent(field, event, function() {
            return _this.modified = true;
          });
        })(event));
      }
      return _results;
    };

    Heyoffline.prototype.networkEvents = function(event) {
      return this.addEvent(window, event, this[event]);
    };

    Heyoffline.prototype.online = function() {
      return this.showMessage();
    };

    Heyoffline.prototype.offline = function() {
      return this.hideMessage();
    };

    Heyoffline.prototype.showMessage = function() {
      return console.log('offline');
    };

    Heyoffline.prototype.hideMessage = function() {
      console.log('online');
      return this.destroyElements();
    };

    return Heyoffline;

  })(Utilities);

  window.addEventListener('load', function() {
    return new Heyoffline({
      delay: 2000
    });
  }, true);

}).call(this);
